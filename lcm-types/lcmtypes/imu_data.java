/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

package lcmtypes;
 
import java.io.*;
import java.util.*;
import lcm.lcm.*;
 
public final class imu_data implements lcm.lcm.LCMEncodable
{
    public double roll;
    public double yaw;
    public double pitch;
    public double acc[];
    public double angle_speed[];
 
    public imu_data()
    {
        acc = new double[3];
        angle_speed = new double[3];
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0x9dbe0e8b0dcaafb8L;
 
    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class<?>>());
    }
 
    public static long _hashRecursive(ArrayList<Class<?>> classes)
    {
        if (classes.contains(lcmtypes.imu_data.class))
            return 0L;
 
        classes.add(lcmtypes.imu_data.class);
        long hash = LCM_FINGERPRINT_BASE
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        outs.writeDouble(this.roll); 
 
        outs.writeDouble(this.yaw); 
 
        outs.writeDouble(this.pitch); 
 
        for (int a = 0; a < 3; a++) {
            outs.writeDouble(this.acc[a]); 
        }
 
        for (int a = 0; a < 3; a++) {
            outs.writeDouble(this.angle_speed[a]); 
        }
 
    }
 
    public imu_data(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public imu_data(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static lcmtypes.imu_data _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        lcmtypes.imu_data o = new lcmtypes.imu_data();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        this.roll = ins.readDouble();
 
        this.yaw = ins.readDouble();
 
        this.pitch = ins.readDouble();
 
        this.acc = new double[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.acc[a] = ins.readDouble();
        }
 
        this.angle_speed = new double[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.angle_speed[a] = ins.readDouble();
        }
 
    }
 
    public lcmtypes.imu_data copy()
    {
        lcmtypes.imu_data outobj = new lcmtypes.imu_data();
        outobj.roll = this.roll;
 
        outobj.yaw = this.yaw;
 
        outobj.pitch = this.pitch;
 
        outobj.acc = new double[(int) 3];
        System.arraycopy(this.acc, 0, outobj.acc, 0, 3); 
        outobj.angle_speed = new double[(int) 3];
        System.arraycopy(this.angle_speed, 0, outobj.angle_speed, 0, 3); 
        return outobj;
    }
 
}

