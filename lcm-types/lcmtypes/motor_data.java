/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

package lcmtypes;
 
import java.io.*;
import java.util.*;
import lcm.lcm.*;
 
public final class motor_data implements lcm.lcm.LCMEncodable
{
    public float speed_actual_rad[];
    public float angle_actual_rad[];
    public short motor_id[];
    public byte temperature[];
    public float current_actual_float[];
 
    public motor_data()
    {
        speed_actual_rad = new float[6];
        angle_actual_rad = new float[6];
        motor_id = new short[6];
        temperature = new byte[6];
        current_actual_float = new float[6];
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0x8d82ea301e2d10d4L;
 
    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class<?>>());
    }
 
    public static long _hashRecursive(ArrayList<Class<?>> classes)
    {
        if (classes.contains(lcmtypes.motor_data.class))
            return 0L;
 
        classes.add(lcmtypes.motor_data.class);
        long hash = LCM_FINGERPRINT_BASE
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        for (int a = 0; a < 6; a++) {
            outs.writeFloat(this.speed_actual_rad[a]); 
        }
 
        for (int a = 0; a < 6; a++) {
            outs.writeFloat(this.angle_actual_rad[a]); 
        }
 
        for (int a = 0; a < 6; a++) {
            outs.writeShort(this.motor_id[a]); 
        }
 
        outs.write(this.temperature, 0, 6);
 
        for (int a = 0; a < 6; a++) {
            outs.writeFloat(this.current_actual_float[a]); 
        }
 
    }
 
    public motor_data(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public motor_data(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static lcmtypes.motor_data _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        lcmtypes.motor_data o = new lcmtypes.motor_data();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        this.speed_actual_rad = new float[(int) 6];
        for (int a = 0; a < 6; a++) {
            this.speed_actual_rad[a] = ins.readFloat();
        }
 
        this.angle_actual_rad = new float[(int) 6];
        for (int a = 0; a < 6; a++) {
            this.angle_actual_rad[a] = ins.readFloat();
        }
 
        this.motor_id = new short[(int) 6];
        for (int a = 0; a < 6; a++) {
            this.motor_id[a] = ins.readShort();
        }
 
        this.temperature = new byte[(int) 6];
        ins.readFully(this.temperature, 0, (int) 6); 
        this.current_actual_float = new float[(int) 6];
        for (int a = 0; a < 6; a++) {
            this.current_actual_float[a] = ins.readFloat();
        }
 
    }
 
    public lcmtypes.motor_data copy()
    {
        lcmtypes.motor_data outobj = new lcmtypes.motor_data();
        outobj.speed_actual_rad = new float[(int) 6];
        System.arraycopy(this.speed_actual_rad, 0, outobj.speed_actual_rad, 0, 6); 
        outobj.angle_actual_rad = new float[(int) 6];
        System.arraycopy(this.angle_actual_rad, 0, outobj.angle_actual_rad, 0, 6); 
        outobj.motor_id = new short[(int) 6];
        System.arraycopy(this.motor_id, 0, outobj.motor_id, 0, 6); 
        outobj.temperature = new byte[(int) 6];
        System.arraycopy(this.temperature, 0, outobj.temperature, 0, 6); 
        outobj.current_actual_float = new float[(int) 6];
        System.arraycopy(this.current_actual_float, 0, outobj.current_actual_float, 0, 6); 
        return outobj;
    }
 
}

