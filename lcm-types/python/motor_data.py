"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class motor_data(object):
    __slots__ = ["speed_actual_rad", "angle_actual_rad", "motor_id", "temperature", "current_actual_float"]

    __typenames__ = ["float", "float", "int16_t", "int8_t", "float"]

    __dimensions__ = [[6], [6], [6], [6], [6]]

    def __init__(self):
        self.speed_actual_rad = [ 0.0 for dim0 in range(6) ]
        self.angle_actual_rad = [ 0.0 for dim0 in range(6) ]
        self.motor_id = [ 0 for dim0 in range(6) ]
        self.temperature = [ 0 for dim0 in range(6) ]
        self.current_actual_float = [ 0.0 for dim0 in range(6) ]

    def encode(self):
        buf = BytesIO()
        buf.write(motor_data._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack('>6f', *self.speed_actual_rad[:6]))
        buf.write(struct.pack('>6f', *self.angle_actual_rad[:6]))
        buf.write(struct.pack('>6h', *self.motor_id[:6]))
        buf.write(struct.pack('>6b', *self.temperature[:6]))
        buf.write(struct.pack('>6f', *self.current_actual_float[:6]))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != motor_data._get_packed_fingerprint():
            raise ValueError("Decode error")
        return motor_data._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = motor_data()
        self.speed_actual_rad = struct.unpack('>6f', buf.read(24))
        self.angle_actual_rad = struct.unpack('>6f', buf.read(24))
        self.motor_id = struct.unpack('>6h', buf.read(12))
        self.temperature = struct.unpack('>6b', buf.read(6))
        self.current_actual_float = struct.unpack('>6f', buf.read(24))
        return self
    _decode_one = staticmethod(_decode_one)

    def _get_hash_recursive(parents):
        if motor_data in parents: return 0
        tmphash = (0x8d82ea301e2d10d4) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if motor_data._packed_fingerprint is None:
            motor_data._packed_fingerprint = struct.pack(">Q", motor_data._get_hash_recursive([]))
        return motor_data._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(">Q", motor_data._get_packed_fingerprint())[0]

